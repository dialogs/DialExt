// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: dialog.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct AppSharedDialog: SwiftProtobuf.Message {
  public static let protoMessageName: String = "AppSharedDialog"

  public var id: Int64 = 0

  public var isGroup: Bool = false

  public var title: String = String()

  public var uids: [Int32] = []

  public var isReadOnly: Bool = false

  public var accessHash: Int64 = 0

  public var peerID: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularBoolField(value: &self.isGroup)
      case 3: try decoder.decodeSingularStringField(value: &self.title)
      case 4: try decoder.decodeRepeatedInt32Field(value: &self.uids)
      case 5: try decoder.decodeSingularBoolField(value: &self.isReadOnly)
      case 6: try decoder.decodeSingularInt64Field(value: &self.accessHash)
      case 7: try decoder.decodeSingularInt32Field(value: &self.peerID)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.isGroup != false {
      try visitor.visitSingularBoolField(value: self.isGroup, fieldNumber: 2)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 3)
    }
    if !self.uids.isEmpty {
      try visitor.visitPackedInt32Field(value: self.uids, fieldNumber: 4)
    }
    if self.isReadOnly != false {
      try visitor.visitSingularBoolField(value: self.isReadOnly, fieldNumber: 5)
    }
    if self.accessHash != 0 {
      try visitor.visitSingularInt64Field(value: self.accessHash, fieldNumber: 6)
    }
    if self.peerID != 0 {
      try visitor.visitSingularInt32Field(value: self.peerID, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct AppSharedUser: SwiftProtobuf.Message {
  public static let protoMessageName: String = "AppSharedUser"

  public var id: Int32 = 0

  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct AppSharedDialogListContext: SwiftProtobuf.Message {
  public static let protoMessageName: String = "AppSharedDialogListContext"

  public var dialogs: [AppSharedDialog] {
    get {return _storage._dialogs}
    set {_uniqueStorage()._dialogs = newValue}
  }

  public var users: [AppSharedUser] {
    get {return _storage._users}
    set {_uniqueStorage()._users = newValue}
  }

  public var mainUser: AppSharedUser {
    get {return _storage._mainUser ?? AppSharedUser()}
    set {_uniqueStorage()._mainUser = newValue}
  }
  /// Returns true if `mainUser` has been explicitly set.
  public var hasMainUser: Bool {return _storage._mainUser != nil}
  /// Clears the value of `mainUser`. Subsequent reads from it will return its default value.
  public mutating func clearMainUser() {_storage._mainUser = nil}

  public var version: String {
    get {return _storage._version}
    set {_uniqueStorage()._version = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._dialogs)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._users)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._mainUser)
        case 4: try decoder.decodeSingularStringField(value: &_storage._version)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._dialogs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._dialogs, fieldNumber: 1)
      }
      if !_storage._users.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._users, fieldNumber: 2)
      }
      if let v = _storage._mainUser {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._version.isEmpty {
        try visitor.visitSingularStringField(value: _storage._version, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct AppSharedDialogList: SwiftProtobuf.Message {
  public static let protoMessageName: String = "AppSharedDialogList"

  public var ids: [Int64] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedInt64Field(value: &self.ids)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ids.isEmpty {
      try visitor.visitPackedInt64Field(value: self.ids, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension AppSharedDialog: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "isGroup"),
    3: .same(proto: "title"),
    4: .same(proto: "uids"),
    5: .same(proto: "isReadOnly"),
    6: .same(proto: "accessHash"),
    7: .same(proto: "peerId"),
  ]

  public func _protobuf_generated_isEqualTo(other: AppSharedDialog) -> Bool {
    if self.id != other.id {return false}
    if self.isGroup != other.isGroup {return false}
    if self.title != other.title {return false}
    if self.uids != other.uids {return false}
    if self.isReadOnly != other.isReadOnly {return false}
    if self.accessHash != other.accessHash {return false}
    if self.peerID != other.peerID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension AppSharedUser: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
  ]

  public func _protobuf_generated_isEqualTo(other: AppSharedUser) -> Bool {
    if self.id != other.id {return false}
    if self.name != other.name {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension AppSharedDialogListContext: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dialogs"),
    2: .same(proto: "users"),
    3: .same(proto: "mainUser"),
    4: .same(proto: "version"),
  ]

  fileprivate class _StorageClass {
    var _dialogs: [AppSharedDialog] = []
    var _users: [AppSharedUser] = []
    var _mainUser: AppSharedUser? = nil
    var _version: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _dialogs = source._dialogs
      _users = source._users
      _mainUser = source._mainUser
      _version = source._version
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: AppSharedDialogListContext) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._dialogs != other_storage._dialogs {return false}
        if _storage._users != other_storage._users {return false}
        if _storage._mainUser != other_storage._mainUser {return false}
        if _storage._version != other_storage._version {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension AppSharedDialogList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ids"),
  ]

  public func _protobuf_generated_isEqualTo(other: AppSharedDialogList) -> Bool {
    if self.ids != other.ids {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
