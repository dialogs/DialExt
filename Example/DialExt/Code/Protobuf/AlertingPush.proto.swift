/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "alerting_push.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct AlertingPushRoot {
    public static let `default` = AlertingPushRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class Localizeable : GeneratedMessage {

    public static func == (lhs: Localizeable, rhs: Localizeable) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasLocKey == rhs.hasLocKey) && (!lhs.hasLocKey || lhs.locKey == rhs.locKey)
        fieldCheck = fieldCheck && (lhs.locArgs == rhs.locArgs)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var locKey:String = ""
    public fileprivate(set) var hasLocKey:Bool = false

    public fileprivate(set) var locArgs:Array<String> = Array<String>()
    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasLocKey {
            try codedOutputStream.writeString(fieldNumber: 1, value:locKey)
        }
        if !locArgs.isEmpty {
            for oneValuelocArgs in locArgs {
                try codedOutputStream.writeString(fieldNumber: 2, value:oneValuelocArgs)
            }
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasLocKey {
            serialize_size += locKey.computeStringSize(fieldNumber: 1)
        }
        var dataSizeLocArgs:Int32 = 0
        for oneValuelocArgs in locArgs {
            dataSizeLocArgs += oneValuelocArgs.computeStringSizeNoTag()
        }
        serialize_size += dataSizeLocArgs
        serialize_size += 1 * Int32(locArgs.count)
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> Localizeable.Builder {
        return Localizeable.classBuilder() as! Localizeable.Builder
    }
    public func getBuilder() -> Localizeable.Builder {
        return classBuilder() as! Localizeable.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return Localizeable.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return Localizeable.Builder()
    }
    public func toBuilder() throws -> Localizeable.Builder {
        return try Localizeable.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Localizeable) throws -> Localizeable.Builder {
        return try Localizeable.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasLocKey {
            jsonMap["locKey"] = locKey
        }
        if !locArgs.isEmpty {
            var jsonArrayLocArgs:Array<String> = []
            for oneValueLocArgs in locArgs {
                jsonArrayLocArgs.append(oneValueLocArgs)
            }
            jsonMap["locArgs"] = jsonArrayLocArgs
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Localizeable {
        return try Localizeable.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Localizeable {
        return try Localizeable.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasLocKey {
            output += "\(indent) locKey: \(locKey) \n"
        }
        var locArgsElementIndex:Int = 0
        for oneValueLocArgs in locArgs  {
            output += "\(indent) locArgs[\(locArgsElementIndex)]: \(oneValueLocArgs)\n"
            locArgsElementIndex += 1
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasLocKey {
                hashCode = (hashCode &* 31) &+ locKey.hashValue
            }
            for oneValueLocArgs in locArgs {
                hashCode = (hashCode &* 31) &+ oneValueLocArgs.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Localizeable"
    }
    override public func className() -> String {
        return "Localizeable"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:Localizeable = Localizeable()
        public func getMessage() -> Localizeable {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var locKey:String {
            get {
                return builderResult.locKey
            }
            set (value) {
                builderResult.hasLocKey = true
                builderResult.locKey = value
            }
        }
        public var hasLocKey:Bool {
            get {
                return builderResult.hasLocKey
            }
        }
        @discardableResult
        public func setLocKey(_ value:String) -> Localizeable.Builder {
            self.locKey = value
            return self
        }
        @discardableResult
        public func clearLocKey() -> Localizeable.Builder{
            builderResult.hasLocKey = false
            builderResult.locKey = ""
            return self
        }
        public var locArgs:Array<String> {
            get {
                return builderResult.locArgs
            }
            set (array) {
                builderResult.locArgs = array
            }
        }
        @discardableResult
        public func setLocArgs(_ value:Array<String>) -> Localizeable.Builder {
            self.locArgs = value
            return self
        }
        @discardableResult
        public func clearLocArgs() -> Localizeable.Builder {
            builderResult.locArgs.removeAll(keepingCapacity: false)
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> Localizeable.Builder {
            builderResult = Localizeable()
            return self
        }
        override public func clone() throws -> Localizeable.Builder {
            return try Localizeable.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> Localizeable {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> Localizeable {
            let returnMe:Localizeable = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:Localizeable) throws -> Localizeable.Builder {
            if other == Localizeable() {
                return self
            }
            if other.hasLocKey {
                locKey = other.locKey
            }
            if !other.locArgs.isEmpty {
                builderResult.locArgs += other.locArgs
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Localizeable.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Localizeable.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    locKey = try codedInputStream.readString()

                case 18:
                    locArgs += [try codedInputStream.readString()]

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Localizeable.Builder {
            let resultDecodedBuilder = Localizeable.Builder()
            if let jsonValueLocKey = jsonMap["locKey"] as? String {
                resultDecodedBuilder.locKey = jsonValueLocKey
            }
            if let jsonValueLocArgs = jsonMap["locArgs"] as? Array<String> {
                var jsonArrayLocArgs:Array<String> = []
                for oneValueLocArgs in jsonValueLocArgs {
                    jsonArrayLocArgs.append(oneValueLocArgs)
                }
                resultDecodedBuilder.locArgs = jsonArrayLocArgs
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> Localizeable.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try Localizeable.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class AlertingPush : GeneratedMessage {

    public static func == (lhs: AlertingPush, rhs: AlertingPush) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasLocAlertBody == rhs.hasLocAlertBody) && (!lhs.hasLocAlertBody || lhs.locAlertBody == rhs.locAlertBody)
        fieldCheck = fieldCheck && (lhs.hasSimpleAlertBody == rhs.hasSimpleAlertBody) && (!lhs.hasSimpleAlertBody || lhs.simpleAlertBody == rhs.simpleAlertBody)
        fieldCheck = fieldCheck && (lhs.hasLocAlertTitle == rhs.hasLocAlertTitle) && (!lhs.hasLocAlertTitle || lhs.locAlertTitle == rhs.locAlertTitle)
        fieldCheck = fieldCheck && (lhs.hasSimpleAlertTitle == rhs.hasSimpleAlertTitle) && (!lhs.hasSimpleAlertTitle || lhs.simpleAlertTitle == rhs.simpleAlertTitle)
        fieldCheck = fieldCheck && (lhs.hasSound == rhs.hasSound) && (!lhs.hasSound || lhs.sound == rhs.sound)
        fieldCheck = fieldCheck && (lhs.hasBadge == rhs.hasBadge) && (!lhs.hasBadge || lhs.badge == rhs.badge)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //OneOf declaration start

    public enum AlertBody {
        case OneOfAlertBodyNotSet

        public func checkOneOfIsSet() -> Bool {
            switch self {
            case .OneOfAlertBodyNotSet: return false
            default: return true
            }
        }
        case LocAlertBody(Localizeable)

        public static func getLocAlertBody(_ value:AlertBody) -> Localizeable? {
            switch value {
            case .LocAlertBody(let enumValue):
                return enumValue
                default: return nil
            }
        }
        case SimpleAlertBody(String)

        public static func getSimpleAlertBody(_ value:AlertBody) -> String? {
            switch value {
            case .SimpleAlertBody(let enumValue): return enumValue
            default: return nil
            }
        }
    }
    //OneOf declaration end

    fileprivate var storageAlertBody:AlertingPush.AlertBody =  AlertingPush.AlertBody.OneOfAlertBodyNotSet
    public func getOneOfAlertBody() ->  AlertingPush.AlertBody {
        let copyObjectAlertBody = storageAlertBody
        return copyObjectAlertBody
    }


    //OneOf declaration start

    public enum AlertTitle {
        case OneOfAlertTitleNotSet

        public func checkOneOfIsSet() -> Bool {
            switch self {
            case .OneOfAlertTitleNotSet: return false
            default: return true
            }
        }
        case LocAlertTitle(Localizeable)

        public static func getLocAlertTitle(_ value:AlertTitle) -> Localizeable? {
            switch value {
            case .LocAlertTitle(let enumValue):
                return enumValue
                default: return nil
            }
        }
        case SimpleAlertTitle(String)

        public static func getSimpleAlertTitle(_ value:AlertTitle) -> String? {
            switch value {
            case .SimpleAlertTitle(let enumValue): return enumValue
            default: return nil
            }
        }
    }
    //OneOf declaration end

    fileprivate var storageAlertTitle:AlertingPush.AlertTitle =  AlertingPush.AlertTitle.OneOfAlertTitleNotSet
    public func getOneOfAlertTitle() ->  AlertingPush.AlertTitle {
        let copyObjectAlertTitle = storageAlertTitle
        return copyObjectAlertTitle
    }
    public fileprivate(set) var locAlertBody:Localizeable!{
        get {
            return AlertingPush.AlertBody.getLocAlertBody(storageAlertBody)
        }
        set (newvalue) {
            storageAlertBody = AlertingPush.AlertBody.LocAlertBody(newvalue)
        }
    }
    public fileprivate(set) var hasLocAlertBody:Bool {
        get {
            guard let _ = AlertingPush.AlertBody.getLocAlertBody(storageAlertBody) else {
                return false
            }
            return true
        }
        set(newValue) {
        }
    }
    public fileprivate(set) var simpleAlertBody:String!{
        get {
            return AlertingPush.AlertBody.getSimpleAlertBody(storageAlertBody)
        }
        set (newvalue) {
            storageAlertBody = AlertingPush.AlertBody.SimpleAlertBody(newvalue)
        }
    }
    public fileprivate(set) var hasSimpleAlertBody:Bool {
        get {
            guard let _ = AlertingPush.AlertBody.getSimpleAlertBody(storageAlertBody) else {
                return false
            }
            return true
        }
        set(newValue) {
        }
    }
    public fileprivate(set) var locAlertTitle:Localizeable!{
        get {
            return AlertingPush.AlertTitle.getLocAlertTitle(storageAlertTitle)
        }
        set (newvalue) {
            storageAlertTitle = AlertingPush.AlertTitle.LocAlertTitle(newvalue)
        }
    }
    public fileprivate(set) var hasLocAlertTitle:Bool {
        get {
            guard let _ = AlertingPush.AlertTitle.getLocAlertTitle(storageAlertTitle) else {
                return false
            }
            return true
        }
        set(newValue) {
        }
    }
    public fileprivate(set) var simpleAlertTitle:String!{
        get {
            return AlertingPush.AlertTitle.getSimpleAlertTitle(storageAlertTitle)
        }
        set (newvalue) {
            storageAlertTitle = AlertingPush.AlertTitle.SimpleAlertTitle(newvalue)
        }
    }
    public fileprivate(set) var hasSimpleAlertTitle:Bool {
        get {
            guard let _ = AlertingPush.AlertTitle.getSimpleAlertTitle(storageAlertTitle) else {
                return false
            }
            return true
        }
        set(newValue) {
        }
    }
    public fileprivate(set) var sound:String = ""
    public fileprivate(set) var hasSound:Bool = false

    public fileprivate(set) var badge:Int32 = Int32(0)
    public fileprivate(set) var hasBadge:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasLocAlertBody {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:locAlertBody)
        }
        if hasSimpleAlertBody {
            try codedOutputStream.writeString(fieldNumber: 2, value:simpleAlertBody)
        }
        if hasLocAlertTitle {
            try codedOutputStream.writeMessage(fieldNumber: 3, value:locAlertTitle)
        }
        if hasSimpleAlertTitle {
            try codedOutputStream.writeString(fieldNumber: 4, value:simpleAlertTitle)
        }
        if hasSound {
            try codedOutputStream.writeString(fieldNumber: 5, value:sound)
        }
        if hasBadge {
            try codedOutputStream.writeInt32(fieldNumber: 6, value:badge)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasLocAlertBody {
            if let varSizelocAlertBody = locAlertBody?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizelocAlertBody
            }
        }
        if hasSimpleAlertBody {
            serialize_size += simpleAlertBody.computeStringSize(fieldNumber: 2)
        }
        if hasLocAlertTitle {
            if let varSizelocAlertTitle = locAlertTitle?.computeMessageSize(fieldNumber: 3) {
                serialize_size += varSizelocAlertTitle
            }
        }
        if hasSimpleAlertTitle {
            serialize_size += simpleAlertTitle.computeStringSize(fieldNumber: 4)
        }
        if hasSound {
            serialize_size += sound.computeStringSize(fieldNumber: 5)
        }
        if hasBadge {
            serialize_size += badge.computeInt32Size(fieldNumber: 6)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> AlertingPush.Builder {
        return AlertingPush.classBuilder() as! AlertingPush.Builder
    }
    public func getBuilder() -> AlertingPush.Builder {
        return classBuilder() as! AlertingPush.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return AlertingPush.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return AlertingPush.Builder()
    }
    public func toBuilder() throws -> AlertingPush.Builder {
        return try AlertingPush.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:AlertingPush) throws -> AlertingPush.Builder {
        return try AlertingPush.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasLocAlertBody {
            jsonMap["locAlertBody"] = try locAlertBody.encode()
        }
        if hasSimpleAlertBody {
            jsonMap["simpleAlertBody"] = simpleAlertBody
        }
        if hasLocAlertTitle {
            jsonMap["locAlertTitle"] = try locAlertTitle.encode()
        }
        if hasSimpleAlertTitle {
            jsonMap["simpleAlertTitle"] = simpleAlertTitle
        }
        if hasSound {
            jsonMap["sound"] = sound
        }
        if hasBadge {
            jsonMap["badge"] = Int(badge)
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> AlertingPush {
        return try AlertingPush.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> AlertingPush {
        return try AlertingPush.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasLocAlertBody {
            output += "\(indent) locAlertBody {\n"
            if let outDescLocAlertBody = locAlertBody {
                output += try outDescLocAlertBody.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasSimpleAlertBody {
            output += "\(indent) simpleAlertBody: \(simpleAlertBody) \n"
        }
        if hasLocAlertTitle {
            output += "\(indent) locAlertTitle {\n"
            if let outDescLocAlertTitle = locAlertTitle {
                output += try outDescLocAlertTitle.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasSimpleAlertTitle {
            output += "\(indent) simpleAlertTitle: \(simpleAlertTitle) \n"
        }
        if hasSound {
            output += "\(indent) sound: \(sound) \n"
        }
        if hasBadge {
            output += "\(indent) badge: \(badge) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasLocAlertBody {
                if let hashValuelocAlertBody = locAlertBody?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuelocAlertBody
                }
            }
            if hasSimpleAlertBody {
                hashCode = (hashCode &* 31) &+ simpleAlertBody.hashValue
            }
            if hasLocAlertTitle {
                if let hashValuelocAlertTitle = locAlertTitle?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuelocAlertTitle
                }
            }
            if hasSimpleAlertTitle {
                hashCode = (hashCode &* 31) &+ simpleAlertTitle.hashValue
            }
            if hasSound {
                hashCode = (hashCode &* 31) &+ sound.hashValue
            }
            if hasBadge {
                hashCode = (hashCode &* 31) &+ badge.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "AlertingPush"
    }
    override public func className() -> String {
        return "AlertingPush"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:AlertingPush = AlertingPush()
        public func getMessage() -> AlertingPush {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var locAlertBody:Localizeable! {
            get {
                if locAlertBodyBuilder_ != nil {
                    builderResult.locAlertBody = locAlertBodyBuilder_.getMessage()
                }
                return builderResult.locAlertBody
            }
            set (value) {
                builderResult.hasLocAlertBody = true
                builderResult.locAlertBody = value
            }
        }
        public var hasLocAlertBody:Bool {
            get {
                return builderResult.hasLocAlertBody
            }
        }
        fileprivate var locAlertBodyBuilder_:Localizeable.Builder! {
            didSet {
                builderResult.hasLocAlertBody = true
            }
        }
        public func getLocAlertBodyBuilder() -> Localizeable.Builder {
            if locAlertBodyBuilder_ == nil {
                locAlertBodyBuilder_ = Localizeable.Builder()
                builderResult.locAlertBody = locAlertBodyBuilder_.getMessage()
                if locAlertBody != nil {
                    try! locAlertBodyBuilder_.mergeFrom(other: locAlertBody)
                }
            }
            return locAlertBodyBuilder_
        }
        @discardableResult
        public func setLocAlertBody(_ value:Localizeable!) -> AlertingPush.Builder {
            self.locAlertBody = value
            return self
        }
        @discardableResult
        public func mergeLocAlertBody(value:Localizeable) throws -> AlertingPush.Builder {
            if builderResult.hasLocAlertBody {
                builderResult.locAlertBody = try Localizeable.builderWithPrototype(prototype:builderResult.locAlertBody).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.locAlertBody = value
            }
            builderResult.hasLocAlertBody = true
            return self
        }
        @discardableResult
        public func clearLocAlertBody() -> AlertingPush.Builder {
            locAlertBodyBuilder_ = nil
            builderResult.hasLocAlertBody = false
            builderResult.locAlertBody = nil
            return self
        }
        public var simpleAlertBody:String {
            get {
                return builderResult.simpleAlertBody
            }
            set (value) {
                builderResult.hasSimpleAlertBody = true
                builderResult.simpleAlertBody = value
            }
        }
        public var hasSimpleAlertBody:Bool {
            get {
                return builderResult.hasSimpleAlertBody
            }
        }
        @discardableResult
        public func setSimpleAlertBody(_ value:String) -> AlertingPush.Builder {
            self.simpleAlertBody = value
            return self
        }
        @discardableResult
        public func clearSimpleAlertBody() -> AlertingPush.Builder{
            builderResult.hasSimpleAlertBody = false
            builderResult.simpleAlertBody = ""
            return self
        }
        public var locAlertTitle:Localizeable! {
            get {
                if locAlertTitleBuilder_ != nil {
                    builderResult.locAlertTitle = locAlertTitleBuilder_.getMessage()
                }
                return builderResult.locAlertTitle
            }
            set (value) {
                builderResult.hasLocAlertTitle = true
                builderResult.locAlertTitle = value
            }
        }
        public var hasLocAlertTitle:Bool {
            get {
                return builderResult.hasLocAlertTitle
            }
        }
        fileprivate var locAlertTitleBuilder_:Localizeable.Builder! {
            didSet {
                builderResult.hasLocAlertTitle = true
            }
        }
        public func getLocAlertTitleBuilder() -> Localizeable.Builder {
            if locAlertTitleBuilder_ == nil {
                locAlertTitleBuilder_ = Localizeable.Builder()
                builderResult.locAlertTitle = locAlertTitleBuilder_.getMessage()
                if locAlertTitle != nil {
                    try! locAlertTitleBuilder_.mergeFrom(other: locAlertTitle)
                }
            }
            return locAlertTitleBuilder_
        }
        @discardableResult
        public func setLocAlertTitle(_ value:Localizeable!) -> AlertingPush.Builder {
            self.locAlertTitle = value
            return self
        }
        @discardableResult
        public func mergeLocAlertTitle(value:Localizeable) throws -> AlertingPush.Builder {
            if builderResult.hasLocAlertTitle {
                builderResult.locAlertTitle = try Localizeable.builderWithPrototype(prototype:builderResult.locAlertTitle).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.locAlertTitle = value
            }
            builderResult.hasLocAlertTitle = true
            return self
        }
        @discardableResult
        public func clearLocAlertTitle() -> AlertingPush.Builder {
            locAlertTitleBuilder_ = nil
            builderResult.hasLocAlertTitle = false
            builderResult.locAlertTitle = nil
            return self
        }
        public var simpleAlertTitle:String {
            get {
                return builderResult.simpleAlertTitle
            }
            set (value) {
                builderResult.hasSimpleAlertTitle = true
                builderResult.simpleAlertTitle = value
            }
        }
        public var hasSimpleAlertTitle:Bool {
            get {
                return builderResult.hasSimpleAlertTitle
            }
        }
        @discardableResult
        public func setSimpleAlertTitle(_ value:String) -> AlertingPush.Builder {
            self.simpleAlertTitle = value
            return self
        }
        @discardableResult
        public func clearSimpleAlertTitle() -> AlertingPush.Builder{
            builderResult.hasSimpleAlertTitle = false
            builderResult.simpleAlertTitle = ""
            return self
        }
        public var sound:String {
            get {
                return builderResult.sound
            }
            set (value) {
                builderResult.hasSound = true
                builderResult.sound = value
            }
        }
        public var hasSound:Bool {
            get {
                return builderResult.hasSound
            }
        }
        @discardableResult
        public func setSound(_ value:String) -> AlertingPush.Builder {
            self.sound = value
            return self
        }
        @discardableResult
        public func clearSound() -> AlertingPush.Builder{
            builderResult.hasSound = false
            builderResult.sound = ""
            return self
        }
        public var badge:Int32 {
            get {
                return builderResult.badge
            }
            set (value) {
                builderResult.hasBadge = true
                builderResult.badge = value
            }
        }
        public var hasBadge:Bool {
            get {
                return builderResult.hasBadge
            }
        }
        @discardableResult
        public func setBadge(_ value:Int32) -> AlertingPush.Builder {
            self.badge = value
            return self
        }
        @discardableResult
        public func clearBadge() -> AlertingPush.Builder{
            builderResult.hasBadge = false
            builderResult.badge = Int32(0)
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> AlertingPush.Builder {
            builderResult = AlertingPush()
            return self
        }
        override public func clone() throws -> AlertingPush.Builder {
            return try AlertingPush.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> AlertingPush {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> AlertingPush {
            let returnMe:AlertingPush = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:AlertingPush) throws -> AlertingPush.Builder {
            if other == AlertingPush() {
                return self
            }
            if (other.hasLocAlertBody) {
                try mergeLocAlertBody(value: other.locAlertBody)
            }
            if other.hasSimpleAlertBody {
                simpleAlertBody = other.simpleAlertBody
            }
            if (other.hasLocAlertTitle) {
                try mergeLocAlertTitle(value: other.locAlertTitle)
            }
            if other.hasSimpleAlertTitle {
                simpleAlertTitle = other.simpleAlertTitle
            }
            if other.hasSound {
                sound = other.sound
            }
            if other.hasBadge {
                badge = other.badge
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> AlertingPush.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> AlertingPush.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:Localizeable.Builder = Localizeable.Builder()
                    if hasLocAlertBody {
                        try subBuilder.mergeFrom(other: locAlertBody)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    locAlertBody = subBuilder.buildPartial()

                case 18:
                    simpleAlertBody = try codedInputStream.readString()

                case 26:
                    let subBuilder:Localizeable.Builder = Localizeable.Builder()
                    if hasLocAlertTitle {
                        try subBuilder.mergeFrom(other: locAlertTitle)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    locAlertTitle = subBuilder.buildPartial()

                case 34:
                    simpleAlertTitle = try codedInputStream.readString()

                case 42:
                    sound = try codedInputStream.readString()

                case 48:
                    badge = try codedInputStream.readInt32()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> AlertingPush.Builder {
            let resultDecodedBuilder = AlertingPush.Builder()
            if let jsonValueLocAlertBody = jsonMap["locAlertBody"] as? Dictionary<String,Any> {
                resultDecodedBuilder.locAlertBody = try Localizeable.Builder.decodeToBuilder(jsonMap:jsonValueLocAlertBody).build()

            }
            if let jsonValueSimpleAlertBody = jsonMap["simpleAlertBody"] as? String {
                resultDecodedBuilder.simpleAlertBody = jsonValueSimpleAlertBody
            }
            if let jsonValueLocAlertTitle = jsonMap["locAlertTitle"] as? Dictionary<String,Any> {
                resultDecodedBuilder.locAlertTitle = try Localizeable.Builder.decodeToBuilder(jsonMap:jsonValueLocAlertTitle).build()

            }
            if let jsonValueSimpleAlertTitle = jsonMap["simpleAlertTitle"] as? String {
                resultDecodedBuilder.simpleAlertTitle = jsonValueSimpleAlertTitle
            }
            if let jsonValueSound = jsonMap["sound"] as? String {
                resultDecodedBuilder.sound = jsonValueSound
            }
            if let jsonValueBadge = jsonMap["badge"] as? Int {
                resultDecodedBuilder.badge = Int32(jsonValueBadge)
            } else if let jsonValueBadge = jsonMap["badge"] as? String {
                resultDecodedBuilder.badge = Int32(jsonValueBadge)!
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> AlertingPush.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try AlertingPush.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension Localizeable: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Localizeable> {
        var mergedArray = Array<Localizeable>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Localizeable? {
        return try Localizeable.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Localizeable {
        return try Localizeable.Builder().mergeFrom(data: data, extensionRegistry:AlertingPushRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Localizeable {
        return try Localizeable.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Localizeable {
        return try Localizeable.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Localizeable {
        return try Localizeable.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Localizeable {
        return try Localizeable.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Localizeable {
        return try Localizeable.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "locKey": return self.locKey
        case "locArgs": return self.locArgs
        default: return nil
        }
    }
}
extension Localizeable.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "locKey": return self.locKey
            case "locArgs": return self.locArgs
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "locKey":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.locKey = newSubscriptValue
            case "locArgs":
                guard let newSubscriptValue = newSubscriptValue as? Array<String> else {
                    return
                }
                self.locArgs = newSubscriptValue
            default: return
            }
        }
    }
}
extension AlertingPush: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<AlertingPush> {
        var mergedArray = Array<AlertingPush>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> AlertingPush? {
        return try AlertingPush.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> AlertingPush {
        return try AlertingPush.Builder().mergeFrom(data: data, extensionRegistry:AlertingPushRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> AlertingPush {
        return try AlertingPush.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> AlertingPush {
        return try AlertingPush.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> AlertingPush {
        return try AlertingPush.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> AlertingPush {
        return try AlertingPush.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> AlertingPush {
        return try AlertingPush.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "locAlertBody": return self.locAlertBody
        case "simpleAlertBody": return self.simpleAlertBody
        case "locAlertTitle": return self.locAlertTitle
        case "simpleAlertTitle": return self.simpleAlertTitle
        case "sound": return self.sound
        case "badge": return self.badge
        default: return nil
        }
    }
}
extension AlertingPush.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "locAlertBody": return self.locAlertBody
            case "simpleAlertBody": return self.simpleAlertBody
            case "locAlertTitle": return self.locAlertTitle
            case "simpleAlertTitle": return self.simpleAlertTitle
            case "sound": return self.sound
            case "badge": return self.badge
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "locAlertBody":
                guard let newSubscriptValue = newSubscriptValue as? Localizeable else {
                    return
                }
                self.locAlertBody = newSubscriptValue
            case "simpleAlertBody":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.simpleAlertBody = newSubscriptValue
            case "locAlertTitle":
                guard let newSubscriptValue = newSubscriptValue as? Localizeable else {
                    return
                }
                self.locAlertTitle = newSubscriptValue
            case "simpleAlertTitle":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.simpleAlertTitle = newSubscriptValue
            case "sound":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.sound = newSubscriptValue
            case "badge":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.badge = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
