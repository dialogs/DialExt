// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: alerting_push.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Localizeable: SwiftProtobuf.Message {
  public static let protoMessageName: String = "Localizeable"

  public var locKey: String = String()

  public var locArgs: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.locKey)
      case 2: try decoder.decodeRepeatedStringField(value: &self.locArgs)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.locKey.isEmpty {
      try visitor.visitSingularStringField(value: self.locKey, fieldNumber: 1)
    }
    if !self.locArgs.isEmpty {
      try visitor.visitRepeatedStringField(value: self.locArgs, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct AlertingPush: SwiftProtobuf.Message {
  public static let protoMessageName: String = "AlertingPush"

  public var alertBody: OneOf_AlertBody? {
    get {return _storage._alertBody}
    set {_uniqueStorage()._alertBody = newValue}
  }

  public var locAlertBody: Localizeable {
    get {
      if case .locAlertBody(let v)? = _storage._alertBody {return v}
      return Localizeable()
    }
    set {_uniqueStorage()._alertBody = .locAlertBody(newValue)}
  }

  public var simpleAlertBody: String {
    get {
      if case .simpleAlertBody(let v)? = _storage._alertBody {return v}
      return String()
    }
    set {_uniqueStorage()._alertBody = .simpleAlertBody(newValue)}
  }

  public var alertTitle: OneOf_AlertTitle? {
    get {return _storage._alertTitle}
    set {_uniqueStorage()._alertTitle = newValue}
  }

  public var locAlertTitle: Localizeable {
    get {
      if case .locAlertTitle(let v)? = _storage._alertTitle {return v}
      return Localizeable()
    }
    set {_uniqueStorage()._alertTitle = .locAlertTitle(newValue)}
  }

  public var simpleAlertTitle: String {
    get {
      if case .simpleAlertTitle(let v)? = _storage._alertTitle {return v}
      return String()
    }
    set {_uniqueStorage()._alertTitle = .simpleAlertTitle(newValue)}
  }

  public var sound: String {
    get {return _storage._sound}
    set {_uniqueStorage()._sound = newValue}
  }

  public var badge: Int32 {
    get {return _storage._badge}
    set {_uniqueStorage()._badge = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_AlertBody: Equatable {
    case locAlertBody(Localizeable)
    case simpleAlertBody(String)

    public static func ==(lhs: AlertingPush.OneOf_AlertBody, rhs: AlertingPush.OneOf_AlertBody) -> Bool {
      switch (lhs, rhs) {
      case (.locAlertBody(let l), .locAlertBody(let r)): return l == r
      case (.simpleAlertBody(let l), .simpleAlertBody(let r)): return l == r
      default: return false
      }
    }
  }

  public enum OneOf_AlertTitle: Equatable {
    case locAlertTitle(Localizeable)
    case simpleAlertTitle(String)

    public static func ==(lhs: AlertingPush.OneOf_AlertTitle, rhs: AlertingPush.OneOf_AlertTitle) -> Bool {
      switch (lhs, rhs) {
      case (.locAlertTitle(let l), .locAlertTitle(let r)): return l == r
      case (.simpleAlertTitle(let l), .simpleAlertTitle(let r)): return l == r
      default: return false
      }
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Localizeable?
          if let current = _storage._alertBody {
            try decoder.handleConflictingOneOf()
            if case .locAlertBody(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._alertBody = .locAlertBody(v)}
        case 2:
          if _storage._alertBody != nil {try decoder.handleConflictingOneOf()}
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {_storage._alertBody = .simpleAlertBody(v)}
        case 3:
          var v: Localizeable?
          if let current = _storage._alertTitle {
            try decoder.handleConflictingOneOf()
            if case .locAlertTitle(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._alertTitle = .locAlertTitle(v)}
        case 4:
          if _storage._alertTitle != nil {try decoder.handleConflictingOneOf()}
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {_storage._alertTitle = .simpleAlertTitle(v)}
        case 5: try decoder.decodeSingularStringField(value: &_storage._sound)
        case 6: try decoder.decodeSingularInt32Field(value: &_storage._badge)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._alertBody {
      case .locAlertBody(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .simpleAlertBody(let v)?:
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      case nil: break
      }
      switch _storage._alertTitle {
      case .locAlertTitle(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .simpleAlertTitle(let v)?:
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      case nil: break
      }
      if !_storage._sound.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sound, fieldNumber: 5)
      }
      if _storage._badge != 0 {
        try visitor.visitSingularInt32Field(value: _storage._badge, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Localizeable: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "loc_key"),
    2: .standard(proto: "loc_args"),
  ]

  public func _protobuf_generated_isEqualTo(other: Localizeable) -> Bool {
    if self.locKey != other.locKey {return false}
    if self.locArgs != other.locArgs {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension AlertingPush: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "loc_alert_body"),
    2: .standard(proto: "simple_alert_body"),
    3: .standard(proto: "loc_alert_title"),
    4: .standard(proto: "simple_alert_title"),
    5: .same(proto: "sound"),
    6: .same(proto: "badge"),
  ]

  fileprivate class _StorageClass {
    var _alertBody: AlertingPush.OneOf_AlertBody?
    var _alertTitle: AlertingPush.OneOf_AlertTitle?
    var _sound: String = String()
    var _badge: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _alertBody = source._alertBody
      _alertTitle = source._alertTitle
      _sound = source._sound
      _badge = source._badge
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: AlertingPush) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._alertBody != other_storage._alertBody {return false}
        if _storage._alertTitle != other_storage._alertTitle {return false}
        if _storage._sound != other_storage._sound {return false}
        if _storage._badge != other_storage._badge {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
